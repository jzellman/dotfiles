#!/usr/bin/env bash
TEMP=`getopt -o uhc: --long unmerged,commit:,help -n '$0' -- "$@"`

commit='origin/develop'

USAGE=$(cat <<EOF
Usage: $0 [options] [extra args to pass]

  This program outputs the statements you'd need to run to delete remote branches, allowing you to
  specify if you only show merged or unmerged branches

  Options:

    -u, --unmerged  Show unmerged branches
    -c, --commit    Specify the commit/tip to compare with (default: [$commit])
    -h, --help      Display this help

EOF
)

if [ $? != 0 ] ; then echo "Terminating...\n$USAGE" >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

merged="--merged"
while true; do
    case "$1" in
        -u | --unmerged ) merged="--no-merged"; shift ;;
        -c | --commit ) commit="$2"; shift 2 ;;
        -h | --help )  echo "$USAGE" >&2 ; exit 1 ;;
        -- ) shift; break ;;
        * ) break ;;
    esac
done

branches=$(git branch -r $merged "$commit")

s=""
for branch in $branches; do
    info=$(git for-each-ref --format='%(refname:short) # (%(authorname)) %(committerdate)' refs\/remotes\/$branch)
    if [ -n "$info" ]; then
        s="$s"$'git push --delete '"$info"$'\n'
    fi
done

echo "$s" | sort -k11n -k8M -k9n -k10n